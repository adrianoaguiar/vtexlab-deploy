// Generated by CoffeeScript 1.7.1

/*
Module dependencies.
 */

(function() {
  var S3Deleter, S3Deployer, S3Lister, app, buildSite, cleanS3Bucket, cloneRepository, config, createClient, createDeleter, createDeployer, createListener, express, getBranch, getBucketFiles, getBucketName, globule, http, knox, prepareEnviroment, pullRepository, uploadToS3, validateHookBranch, validateHookSource, writeFile, _;

  express = require('express');

  require('shelljs/global');

  http = require('http');

  knox = require('knox');

  _ = require('underscore');

  globule = require('globule');

  S3Deleter = require('s3-deleter');

  S3Deployer = require('deploy-s3');

  S3Lister = require('s3-lister');

  app = express();

  app.use(express.json());

  app.use(express.urlencoded());

  app.set("port", process.env.PORT || 3000);

  config = {
    port: process.env.PORT || 1338,
    env: process.env.NODE_ENV || 'development'
  };

  validateHookSource = function(req, res, next) {
    var repo, _ref;
    try {
      repo = req.body.repository;
      if ((_ref = repo.name) !== 'vtexlab' && _ref !== 'vtexlab-docs' && _ref !== 'vtexlab-guide') {
        return res.send(401, "Unauthorized");
      } else {
        return next();
      }
    } catch (_error) {
      return res.send(401, "Unauthorized");
    }
  };

  validateHookBranch = function(req, res, next) {
    var branch;
    try {
      branch = getBranch(req);
      if (branch !== 'stable' && branch !== 'development') {
        return res.send(202, "Branch is not \'master\' or \'development\'");
      } else {
        return next();
      }
    } catch (_error) {
      return res.send(401, "Some error occur when try to verify branch-ref");
    }
  };

  cloneRepository = function(req, res, next) {
    var branch, repo;
    repo = req.body.repository;
    branch = getBranch(req);
    if (!test('-e', "" + branch + "/" + repo.name + "/")) {
      exec("pushd " + branch + "/ && git clone https://github.com/vtex/" + repo.name + ".git && popd", function(code, output) {
        if (code !== 0) {
          return res.send(500, output);
        }
      });
      if (branch === 'development') {
        return exec("pushd " + branch + "/" + repo.name + "/ && git checkout development && popd", function(code, output) {
          if (code !== 0) {
            res.send(500, output);
          }
          return next();
        });
      } else {
        return next();
      }
    } else {
      return next();
    }
  };

  pullRepository = function(req, res, next) {
    var branch, repo;
    repo = req.body.repository;
    branch = "" + (getBranch(req)) + "/" + repo.name + "/";
    return exec("pushd " + branch + " && git fetch --all && popd", function(code, output) {
      if (code !== 0) {
        res.send(500, output);
      }
      return exec("pushd " + branch + " && git reset --hard origin/master && popd", function(code, output) {
        if (code !== 0) {
          res.send(500, output);
        }
        return next();
      });
    });
  };

  prepareEnviroment = function(req, res, next) {
    var branch;
    branch = getBranch(req);
    return exec("sudo grunt --branch=" + branch, function(code, output) {
      if (code !== 0) {
        res.send(500, output);
      }
      return next();
    });
  };

  buildSite = function(req, res, next) {
    var branch, repo;
    repo = req.body.repository;
    branch = "" + (getBranch(req)) + "/" + repo.name + "/";
    return exec("pushd " + branch + " && jekyll build && popd", function(code, output) {
      if (code !== 0) {
        return res.send(500, output);
      } else {
        return next();
      }
    });
  };

  cleanS3Bucket = function(req, res, next) {
    var branch, client, deleter, lister;
    branch = getBranch(req);
    client = createClient(getBucketName(branch));
    deleter = createDeleter(client);
    lister = createListener(client);
    deleter.on('error', function(err) {
      console.log("DELETE \'" + branch + "\' FILES FAILED", err);
      return res.send(500, err);
    });
    deleter.on('finish', function() {
      console.log("CLEANUP \'" + branch + "\' SUCCESSFULL");
      return next();
    });
    return lister.pipe(deleter);
  };

  uploadToS3 = function(req, res, next) {
    var branch, client, deployPath, deployer, done, error, fail, fileArray, files, filteredFiles, repo;
    repo = req.body.repository;
    branch = getBranch(req);
    deployPath = "" + branch + "/" + repo.name + "/_site/";
    files = globule.find(deployPath + "**");
    if (files.length === 0) {
      error = "No files sent: " + files;
      console.error(error);
      return res.send(400, error);
    }
    filteredFiles = _.filter(files, function(file) {
      if (test('-f', file)) {
        return file;
      }
    });
    fileArray = _.map(filteredFiles, function(f) {
      return {
        src: f,
        dest: f.replace(deployPath, "")
      };
    });
    console.log(fileArray);
    done = function() {
      console.log("UPLOAD SUCCESSFULL");
      return res.send(200, "Upload complete at vtexlab.s3.amazonaws.com");
    };
    fail = function(reason) {
      console.log("UPLOAD FAILED", reason);
      return res.send(500, reason.toString());
    };
    console.log("STARTING UPLOAD TO S3");
    client = createClient(getBucketName(branch));
    deployer = createDeployer(client);
    return deployer.batchUploadFileArray(fileArray).then(done, fail, console.log);
  };

  createDeployer = function(client) {
    return new S3Deployer({}, client);
  };

  createDeleter = function(client) {
    return new S3Deleter(client, {
      batchSize: 100
    });
  };

  createClient = function(bucketName) {
    return knox.createClient({
      key: process.env.S3_KEY,
      secret: process.env.S3_SECRET,
      bucket: bucketName
    });
  };

  createListener = function(client) {
    return new S3Lister(client);
  };

  getBucketName = function(branch) {
    console.log("getBucketName ", branch);
    if (branch === 'development') {
      return process.env.S3_BUCKET_DEV;
    }
    if (branch === 'stable') {
      return process.env.S3_BUCKET_STABLE;
    }
  };

  getBranch = function(req) {
    if (req.body.ref === "refs/heads/development") {
      return "development";
    }
    if (req.body.ref === "refs/heads/master") {
      return "stable";
    }
  };

  getBucketFiles = function(req, res, next) {
    var client;
    client = createClient(process.env.S3_BUCKET_DOCS);
    client.list({
      prefix: ''
    }, function(err, data) {
      var file, _i, _len, _ref, _results;
      _ref = data.Contents;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push(writeFile(client, file));
      }
      return _results;
    });
    return next();
  };

  writeFile = function(client, file) {
    return client.get(file.Key).on("response", function(res) {
      var dirPath, filePath, new_file;
      filePath = "vtexlab-docs/" + file.Key;
      dirPath = paths.dirname(filePath);
      if (!test('-e', dirPath)) {
        mkdir('-p', dirPath);
      }
      new_file = fs.createWriteStream(filePath);
      res.on('data', function(chunk) {
        return new_file.write(chunk);
      });
      return res.on('end', function() {
        return new_file.end();
      });
    }).end();
  };

  app.get('/', function(req, res) {
    return res.send("<h1>Works!</h1>");
  });

  app.post("/hooks", validateHookSource, validateHookBranch, cloneRepository, pullRepository, prepareEnviroment, buildSite, cleanS3Bucket, uploadToS3);

  http.createServer(app).listen(app.get("port"), function() {
    console.log("Express server listening on port " + app.get("port"));
  });

}).call(this);
